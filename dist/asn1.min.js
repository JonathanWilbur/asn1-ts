var asn1=function(e){var n={};function r(t){if(n[t])return n[t].exports;var s=n[t]={i:t,l:!1,exports:{}};return e[t].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=n,r.d=function(e,n,t){r.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,n){if(1&n&&(e=r(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)r.d(t,s,function(n){return e[n]}.bind(null,s));return t},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="",r(r.s=0)}({"./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://asn1/./node_modules/base64-js/index.js?")},"./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */function(module,exports){eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://asn1/./node_modules/ieee754/index.js?")},"./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */function(module,exports){eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://asn1/./node_modules/isarray/index.js?")},"./node_modules/node-libs-browser/node_modules/buffer/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/buffer/index.js ***!
  \*********************************************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://asn1/./node_modules/node-libs-browser/node_modules/buffer/index.js?")},"./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://asn1/(webpack)/buildin/global.js?')},"./source/asn1.ts":
/*!************************!*\
  !*** ./source/asn1.ts ***!
  \************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result["default"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nconst errors = __importStar(__webpack_require__(/*! ./errors */ "./source/errors.ts"));\r\nconst values_1 = __webpack_require__(/*! ./values */ "./source/values.ts");\r\nclass ASN1Element {\r\n    constructor() {\r\n        this.recursionCount = 0;\r\n        this.tagClass = values_1.ASN1TagClass.universal;\r\n        this.construction = values_1.ASN1Construction.primitive;\r\n        this.tagNumber = 0;\r\n        this.value = new Uint8Array(0);\r\n    }\r\n    get length() {\r\n        return this.value.length;\r\n    }\r\n    static validateDateTime(dataType, year, month, date, hours, minutes, seconds) {\r\n        switch (month) {\r\n            case 0:\r\n            case 2:\r\n            case 4:\r\n            case 6:\r\n            case 7:\r\n            case 9:\r\n            case 11: {\r\n                if (date > 31)\r\n                    throw new errors.ASN1Error(`Day > 31 encountered in ${dataType} with 31-day month.`);\r\n                break;\r\n            }\r\n            case 3:\r\n            case 5:\r\n            case 8:\r\n            case 10: {\r\n                if (date > 30) {\r\n                    throw new errors.ASN1Error(`Day > 31 encountered in ${dataType} with 30-day month.`);\r\n                }\r\n                break;\r\n            }\r\n            case 1: {\r\n                const isLeapYear = ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\r\n                if (isLeapYear) {\r\n                    if (date > 29) {\r\n                        throw new errors.ASN1Error(`Day > 29 encountered in ${dataType} with month of February in leap year.`);\r\n                    }\r\n                }\r\n                else if (date > 28) {\r\n                    throw new errors.ASN1Error(`Day > 28 encountered in ${dataType} with month of February and non leap year.`);\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                throw new errors.ASN1Error(`Month greater than 12 encountered in ${dataType}.`);\r\n        }\r\n        if (hours > 23)\r\n            throw new errors.ASN1Error(`Hours > 23 encountered in ${dataType}.`);\r\n        if (minutes > 59)\r\n            throw new errors.ASN1Error(`Minutes > 60 encountered in ${dataType}.`);\r\n        if (seconds > 59)\r\n            throw new errors.ASN1Error(`Seconds > 60 encountered in ${dataType}.`);\r\n    }\r\n    static decodeUnsignedBigEndianInteger(value) {\r\n        if (value.length === 0)\r\n            return 0;\r\n        if (value.length > 4)\r\n            throw new errors.ASN1OverflowError("Number too long to decode.");\r\n        const u8 = new Uint8Array(4);\r\n        u8.set(value, (4 - value.length));\r\n        return new Uint32Array(u8.reverse().buffer)[0];\r\n    }\r\n    static decodeSignedBigEndianInteger(value) {\r\n        if (value.length === 0)\r\n            return 0;\r\n        if (value.length > 4)\r\n            throw new errors.ASN1OverflowError("Number too long to decode.");\r\n        const u8 = new Uint8Array(4);\r\n        if (value[0] >= 0b10000000)\r\n            u8.fill(0xFF);\r\n        u8.set(value, (4 - value.length));\r\n        return new Int32Array(u8.reverse().buffer)[0];\r\n    }\r\n}\r\nexports.ASN1Element = ASN1Element;\r\nASN1Element.nestingRecursionLimit = 5;\r\n\n\n//# sourceURL=webpack://asn1/./source/asn1.ts?')},"./source/codecs/ber.ts":
/*!******************************!*\
  !*** ./source/codecs/ber.ts ***!
  \******************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(Buffer) {\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result["default"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nconst asn1_1 = __webpack_require__(/*! ../asn1 */ "./source/asn1.ts");\r\nconst errors = __importStar(__webpack_require__(/*! ../errors */ "./source/errors.ts"));\r\nconst values_1 = __webpack_require__(/*! ../values */ "./source/values.ts");\r\nconst x690_1 = __webpack_require__(/*! ../x690 */ "./source/x690.ts");\r\nclass BERElement extends x690_1.X690Element {\r\n    constructor(tagClass = values_1.ASN1TagClass.universal, construction = values_1.ASN1Construction.primitive, tagNumber = 0) {\r\n        super();\r\n        this.tagClass = tagClass;\r\n        this.construction = construction;\r\n        this.tagNumber = tagNumber;\r\n        this.value = new Uint8Array(0);\r\n    }\r\n    set boolean(value) {\r\n        this.value = new Uint8Array(1);\r\n        this.value[0] = (value ? 0xFF : 0x00);\r\n    }\r\n    get boolean() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("BOOLEAN cannot be constructed.");\r\n        }\r\n        if (this.value.length !== 1)\r\n            throw new errors.ASN1SizeError("BOOLEAN not one byte");\r\n        return (this.value[0] !== 0);\r\n    }\r\n    set bitString(value) {\r\n        if (value.length === 0)\r\n            this.value = new Uint8Array(0);\r\n        const pre = [];\r\n        pre.length = ((value.length >>> 3) + ((value.length % 8) ? 1 : 0)) + 1;\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (value[i] === false)\r\n                continue;\r\n            pre[((i >>> 3) + 1)] |= (0b10000000 >>> (i % 8));\r\n        }\r\n        pre[0] = (8 - (value.length % 8));\r\n        if (pre[0] === 8)\r\n            pre[0] = 0;\r\n        this.value = new Uint8Array(pre);\r\n    }\r\n    get bitString() {\r\n        if (this.construction === values_1.ASN1Construction.primitive) {\r\n            if (this.value.length === 0) {\r\n                throw new errors.ASN1Error("ASN.1 BIT STRING cannot be encoded on zero bytes!");\r\n            }\r\n            if (this.value.length === 1 && this.value[0] !== 0) {\r\n                throw new errors.ASN1Error("ASN.1 BIT STRING encoded with deceptive first byte!");\r\n            }\r\n            if (this.value[0] > 7) {\r\n                throw new errors.ASN1Error("First byte of an ASN.1 BIT STRING must be <= 7!");\r\n            }\r\n            let ret = [];\r\n            for (let i = 1; i < this.value.length; i++) {\r\n                ret = ret.concat([\r\n                    (Boolean(this.value[i] & 0b10000000)),\r\n                    (Boolean(this.value[i] & 0b01000000)),\r\n                    (Boolean(this.value[i] & 0b00100000)),\r\n                    (Boolean(this.value[i] & 0b00010000)),\r\n                    (Boolean(this.value[i] & 0b00001000)),\r\n                    (Boolean(this.value[i] & 0b00000100)),\r\n                    (Boolean(this.value[i] & 0b00000010)),\r\n                    (Boolean(this.value[i] & 0b00000001)),\r\n                ]);\r\n            }\r\n            ret.length -= this.value[0];\r\n            return ret;\r\n        }\r\n        else {\r\n            if ((this.recursionCount + 1) > BERElement.nestingRecursionLimit)\r\n                throw new errors.ASN1RecursionError();\r\n            let appendy = [];\r\n            const substrings = this.sequence;\r\n            substrings.slice(0, (substrings.length - 1)).forEach((substring) => {\r\n                if (substring.construction === values_1.ASN1Construction.primitive\r\n                    && substring.value.length > 0\r\n                    && substring.value[0] !== 0x00) {\r\n                    throw new errors.ASN1Error("Only the last subelement of a constructed BIT STRING may have a non-zero first value byte.");\r\n                }\r\n            });\r\n            substrings.forEach((substring) => {\r\n                if (substring.tagClass !== this.tagClass) {\r\n                    throw new errors.ASN1ConstructionError("Invalid tag class in recursively-encoded BIT STRING.");\r\n                }\r\n                if (substring.tagNumber !== this.tagNumber) {\r\n                    throw new errors.ASN1ConstructionError("Invalid tag class in recursively-encoded BIT STRING.");\r\n                }\r\n                substring.recursionCount = (this.recursionCount + 1);\r\n                appendy = appendy.concat(substring.bitString);\r\n            });\r\n            return appendy;\r\n        }\r\n    }\r\n    set octetString(value) {\r\n        this.value = new Uint8Array(value);\r\n    }\r\n    get octetString() {\r\n        return this.deconstruct("OCTET STRING");\r\n    }\r\n    set objectDescriptor(value) {\r\n        this.graphicString = value;\r\n    }\r\n    get objectDescriptor() {\r\n        return this.graphicString;\r\n    }\r\n    set real(value) {\r\n        if (value === 0.0) {\r\n            this.value = new Uint8Array(0);\r\n            return;\r\n        }\r\n        else if (Number.isNaN(value)) {\r\n            this.value = new Uint8Array([values_1.ASN1SpecialRealValue.notANumber]);\r\n            return;\r\n        }\r\n        else if (value === -0.0) {\r\n            this.value = new Uint8Array([values_1.ASN1SpecialRealValue.minusZero]);\r\n            return;\r\n        }\r\n        else if (value === Infinity) {\r\n            this.value = new Uint8Array([values_1.ASN1SpecialRealValue.plusInfinity]);\r\n            return;\r\n        }\r\n        else if (value === -Infinity) {\r\n            this.value = new Uint8Array([values_1.ASN1SpecialRealValue.minusInfinity]);\r\n            return;\r\n        }\r\n        const valueString = (String.fromCharCode(0b00000011) + value.toFixed(7));\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(valueString);\r\n        }\r\n        else {\r\n            this.value = Buffer.from(valueString, "utf-8");\r\n        }\r\n    }\r\n    get real() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("REAL cannot be constructed.");\r\n        }\r\n        if (this.value.length === 0)\r\n            return 0.0;\r\n        switch (this.value[0] & 0b11000000) {\r\n            case (0b01000000): {\r\n                if (this.value[0] === values_1.ASN1SpecialRealValue.notANumber)\r\n                    return NaN;\r\n                if (this.value[0] === values_1.ASN1SpecialRealValue.minusZero)\r\n                    return -0.0;\r\n                if (this.value[0] === values_1.ASN1SpecialRealValue.plusInfinity)\r\n                    return Infinity;\r\n                if (this.value[0] === values_1.ASN1SpecialRealValue.minusInfinity)\r\n                    return -Infinity;\r\n                throw new errors.ASN1UndefinedError("Unrecognized special REAL value!");\r\n            }\r\n            case (0b00000000): {\r\n                let realString;\r\n                if (typeof TextEncoder !== "undefined") {\r\n                    realString = (new TextDecoder("utf-8")).decode(this.value.slice(1));\r\n                }\r\n                else if (typeof Buffer !== "undefined") {\r\n                    realString = (Buffer.from(this.value.slice(1))).toString("utf-8");\r\n                }\r\n                else {\r\n                    throw new errors.ASN1Error("No ability to decode bytes to string!");\r\n                }\r\n                switch (this.value[0] & 0b00111111) {\r\n                    case 1: {\r\n                        if (!values_1.nr1Regex.test(realString))\r\n                            throw new errors.ASN1Error("Malformed NR1 Base-10 REAL");\r\n                        return parseFloat(realString);\r\n                    }\r\n                    case 2: {\r\n                        if (!values_1.nr2Regex.test(realString))\r\n                            throw new errors.ASN1Error("Malformed NR2 Base-10 REAL");\r\n                        return parseFloat(realString.replace(",", "."));\r\n                    }\r\n                    case 3: {\r\n                        if (!values_1.nr3Regex.test(realString))\r\n                            throw new errors.ASN1Error("Malformed NR3 Base-10 REAL");\r\n                        return parseFloat(realString.replace(",", "."));\r\n                    }\r\n                    default:\r\n                        throw new errors.ASN1UndefinedError("Undefined Base-10 REAL encoding.");\r\n                }\r\n            }\r\n            case (0b10000000):\r\n            case (0b11000000): {\r\n                const sign = ((this.value[0] & 0b01000000) ? -1 : 1);\r\n                const base = ((flag) => {\r\n                    switch (flag) {\r\n                        case (values_1.ASN1RealEncodingBase.base2): return 2;\r\n                        case (values_1.ASN1RealEncodingBase.base8): return 8;\r\n                        case (values_1.ASN1RealEncodingBase.base16): return 16;\r\n                        default:\r\n                            throw new errors.ASN1Error("Impossible REAL encoding base encountered.");\r\n                    }\r\n                })(this.value[0] & 0b00110000);\r\n                const scale = ((flag) => {\r\n                    switch (flag) {\r\n                        case (values_1.ASN1RealEncodingScale.scale0): return 0;\r\n                        case (values_1.ASN1RealEncodingScale.scale1): return 1;\r\n                        case (values_1.ASN1RealEncodingScale.scale2): return 2;\r\n                        case (values_1.ASN1RealEncodingScale.scale3): return 3;\r\n                        default:\r\n                            throw new errors.ASN1Error("Impossible REAL encoding scale encountered.");\r\n                    }\r\n                })(this.value[0] & 0b00001100);\r\n                let exponent;\r\n                let mantissa;\r\n                switch (this.value[0] & 0b00000011) {\r\n                    case (0b00000000): {\r\n                        if (this.value.length < 3)\r\n                            throw new errors.ASN1TruncationError("Binary-encoded REAL truncated.");\r\n                        exponent = asn1_1.ASN1Element.decodeSignedBigEndianInteger(this.value.subarray(1, 2));\r\n                        mantissa = asn1_1.ASN1Element.decodeUnsignedBigEndianInteger(this.value.subarray(2));\r\n                        break;\r\n                    }\r\n                    case (0b00000001): {\r\n                        if (this.value.length < 4)\r\n                            throw new errors.ASN1TruncationError("Binary-encoded REAL truncated.");\r\n                        exponent = asn1_1.ASN1Element.decodeSignedBigEndianInteger(this.value.subarray(1, 3));\r\n                        mantissa = asn1_1.ASN1Element.decodeUnsignedBigEndianInteger(this.value.subarray(3));\r\n                        break;\r\n                    }\r\n                    case (0b00000010): {\r\n                        if (this.value.length < 5)\r\n                            throw new errors.ASN1TruncationError("Binary-encoded REAL truncated.");\r\n                        exponent = asn1_1.ASN1Element.decodeSignedBigEndianInteger(this.value.subarray(1, 4));\r\n                        mantissa = asn1_1.ASN1Element.decodeUnsignedBigEndianInteger(this.value.subarray(4));\r\n                        break;\r\n                    }\r\n                    case (0b00000011): {\r\n                        if (this.value.length < 3)\r\n                            throw new errors.ASN1TruncationError("Binary-encoded REAL truncated.");\r\n                        const exponentLength = this.value[1];\r\n                        if (this.value.length < (3 + exponentLength)) {\r\n                            throw new errors.ASN1TruncationError("Binary-encoded REAL truncated.");\r\n                        }\r\n                        exponent = asn1_1.ASN1Element.decodeSignedBigEndianInteger(this.value.subarray(2, (2 + exponentLength)));\r\n                        mantissa = asn1_1.ASN1Element.decodeUnsignedBigEndianInteger(this.value.subarray((2 + exponentLength)));\r\n                        break;\r\n                    }\r\n                    default:\r\n                        throw new errors.ASN1Error("Impossible binary REAL exponent encoding encountered.");\r\n                }\r\n                return (sign * mantissa * Math.pow(2, scale) * Math.pow(base, exponent));\r\n            }\r\n            default:\r\n                throw new errors.ASN1Error("Impossible REAL format encountered.");\r\n        }\r\n    }\r\n    set utf8String(value) {\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get utf8String() {\r\n        const valueBytes = this.deconstruct("UTF8String");\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        return ret;\r\n    }\r\n    set sequence(value) {\r\n        const encodedElements = [];\r\n        value.forEach((element) => {\r\n            encodedElements.push(element.toBytes());\r\n        });\r\n        let totalLength = 0;\r\n        encodedElements.forEach((element) => {\r\n            totalLength += element.length;\r\n        });\r\n        const newValue = new Uint8Array(totalLength);\r\n        let currentIndex = 0;\r\n        encodedElements.forEach((element) => {\r\n            newValue.set(element, currentIndex);\r\n            currentIndex += element.length;\r\n        });\r\n        this.value = newValue;\r\n        this.construction = values_1.ASN1Construction.constructed;\r\n    }\r\n    get sequence() {\r\n        if (this.construction !== values_1.ASN1Construction.constructed) {\r\n            throw new errors.ASN1ConstructionError("SET or SEQUENCE cannot be primitively constructed.");\r\n        }\r\n        const encodedElements = [];\r\n        if (this.value.length === 0)\r\n            return [];\r\n        let i = 0;\r\n        while (i < this.value.length) {\r\n            const next = new BERElement();\r\n            i += next.fromBytes(this.value.slice(i));\r\n            encodedElements.push(next);\r\n        }\r\n        return encodedElements;\r\n    }\r\n    set set(value) {\r\n        this.sequence = value;\r\n    }\r\n    get set() {\r\n        return this.sequence;\r\n    }\r\n    set numericString(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const characterCode = value.charCodeAt(i);\r\n            if (!((characterCode >= 0x30 && characterCode <= 0x39) || characterCode === 0x20)) {\r\n                throw new errors.ASN1CharactersError("NumericString can only contain characters 0 - 9 and space.");\r\n            }\r\n        }\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get numericString() {\r\n        const valueBytes = this.deconstruct("NumericString");\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        for (let i = 0; i < ret.length; i++) {\r\n            const characterCode = ret.charCodeAt(i);\r\n            if (!((characterCode >= 0x30 && characterCode <= 0x39) || characterCode === 0x20)) {\r\n                throw new errors.ASN1CharactersError("NumericString can only contain characters 0 - 9 and space.");\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    set printableString(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (values_1.printableStringCharacters.indexOf(value.charAt(i)) === -1) {\r\n                throw new errors.ASN1CharactersError(`PrintableString can only contain these characters: ${values_1.printableStringCharacters}`);\r\n            }\r\n        }\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get printableString() {\r\n        const valueBytes = this.deconstruct("PrintableString");\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        for (let i = 0; i < ret.length; i++) {\r\n            if (values_1.printableStringCharacters.indexOf(ret.charAt(i)) === -1) {\r\n                throw new errors.ASN1CharactersError(`PrintableString can only contain these characters: ${values_1.printableStringCharacters}`);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    set teletexString(value) {\r\n        this.value = new Uint8Array(value);\r\n    }\r\n    get teletexString() {\r\n        return this.deconstruct("TeletexString");\r\n    }\r\n    set videotexString(value) {\r\n        this.value = new Uint8Array(value);\r\n    }\r\n    get videotexString() {\r\n        return this.deconstruct("VideotexString");\r\n    }\r\n    set ia5String(value) {\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get ia5String() {\r\n        const valueBytes = this.deconstruct("IA5String");\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        return ret;\r\n    }\r\n    set utcTime(value) {\r\n        let year = value.getUTCFullYear().toString();\r\n        year = (year.substring(year.length - 2, year.length));\r\n        const month = (value.getUTCMonth() < 9 ? `0${value.getUTCMonth() + 1}` : `${value.getUTCMonth() + 1}`);\r\n        const day = (value.getUTCDate() < 10 ? `0${value.getUTCDate()}` : `${value.getUTCDate()}`);\r\n        const hour = (value.getUTCHours() < 10 ? `0${value.getUTCHours()}` : `${value.getUTCHours()}`);\r\n        const minute = (value.getUTCMinutes() < 10 ? `0${value.getUTCMinutes()}` : `${value.getUTCMinutes()}`);\r\n        const second = (value.getUTCSeconds() < 10 ? `0${value.getUTCSeconds()}` : `${value.getUTCSeconds()}`);\r\n        const utcString = `${year}${month}${day}${hour}${minute}${second}Z`;\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(utcString);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(utcString, "utf-8");\r\n        }\r\n    }\r\n    get utcTime() {\r\n        const valueBytes = this.deconstruct("UTCTime");\r\n        let dateString = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            dateString = (new TextDecoder("utf-8")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            dateString = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        const match = values_1.utcTimeRegex.exec(dateString);\r\n        if (match === null)\r\n            throw new errors.ASN1Error("Malformed UTCTime string.");\r\n        const ret = new Date();\r\n        let year = Number(match[1]);\r\n        year = (year < 70 ? (2000 + year) : (1900 + year));\r\n        const month = (Number(match[2]) - 1);\r\n        const date = Number(match[3]);\r\n        const hours = Number(match[4]);\r\n        const minutes = Number(match[5]);\r\n        const seconds = Number(match[6]);\r\n        BERElement.validateDateTime("UTCTime", year, month, date, hours, minutes, seconds);\r\n        ret.setUTCFullYear(year);\r\n        ret.setUTCMonth(month);\r\n        ret.setUTCDate(date);\r\n        ret.setUTCHours(hours);\r\n        ret.setUTCMinutes(minutes);\r\n        ret.setUTCSeconds(seconds);\r\n        return ret;\r\n    }\r\n    set generalizedTime(value) {\r\n        const year = value.getUTCFullYear().toString();\r\n        const month = (value.getUTCMonth() < 9 ? `0${value.getUTCMonth() + 1}` : `${value.getUTCMonth() + 1}`);\r\n        const day = (value.getUTCDate() < 10 ? `0${value.getUTCDate()}` : `${value.getUTCDate()}`);\r\n        const hour = (value.getUTCHours() < 10 ? `0${value.getUTCHours()}` : `${value.getUTCHours()}`);\r\n        const minute = (value.getUTCMinutes() < 10 ? `0${value.getUTCMinutes()}` : `${value.getUTCMinutes()}`);\r\n        const second = (value.getUTCSeconds() < 10 ? `0${value.getUTCSeconds()}` : `${value.getUTCSeconds()}`);\r\n        const timeString = `${year}${month}${day}${hour}${minute}${second}Z`;\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(timeString);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(timeString, "utf-8");\r\n        }\r\n    }\r\n    get generalizedTime() {\r\n        const valueBytes = this.deconstruct("GeneralizedTime");\r\n        let dateString = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            dateString = (new TextDecoder("utf-8")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            dateString = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        const match = values_1.generalizedTimeRegex.exec(dateString);\r\n        if (match === null)\r\n            throw new errors.ASN1Error("Malformed GeneralizedTime string.");\r\n        const ret = new Date();\r\n        const year = Number(match[1]);\r\n        const month = (Number(match[2]) - 1);\r\n        const date = Number(match[3]);\r\n        const hours = Number(match[4]);\r\n        const minutes = Number(match[5]);\r\n        const seconds = Number(match[6]);\r\n        BERElement.validateDateTime("GeneralizedTime", year, month, date, hours, minutes, seconds);\r\n        ret.setUTCFullYear(year);\r\n        ret.setUTCMonth(month);\r\n        ret.setUTCDate(date);\r\n        ret.setUTCHours(hours);\r\n        ret.setUTCMinutes(minutes);\r\n        ret.setUTCSeconds(seconds);\r\n        return ret;\r\n    }\r\n    set graphicString(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const characterCode = value.charCodeAt(i);\r\n            if (characterCode < 0x20 || characterCode > 0x7E)\r\n                throw new errors.ASN1CharactersError("GraphicString, VisibleString, or ObjectDescriptor "\r\n                    + "can only contain characters between 0x20 and 0x7E.");\r\n        }\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get graphicString() {\r\n        const valueBytes = this.deconstruct("GraphicString, VisibleString, or ObjectDescriptor");\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        for (let i = 0; i < ret.length; i++) {\r\n            const characterCode = ret.charCodeAt(i);\r\n            if (characterCode < 0x20 || characterCode > 0x7E) {\r\n                throw new errors.ASN1CharactersError("GraphicString, VisibleString, or ObjectDescriptor "\r\n                    + "can only contain characters between 0x20 and 0x7E."\r\n                    + ` Buffer: ${this.value.join(":")}`);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    set visibleString(value) {\r\n        this.graphicString = value;\r\n    }\r\n    get visibleString() {\r\n        return this.graphicString;\r\n    }\r\n    set generalString(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (value.charCodeAt(i) > 0x7F) {\r\n                throw new errors.ASN1CharactersError("GeneralString can only contain ASCII characters.");\r\n            }\r\n        }\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "ascii");\r\n        }\r\n    }\r\n    get generalString() {\r\n        const valueBytes = this.deconstruct("GeneralString");\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        for (let i = 0; i < ret.length; i++) {\r\n            if (ret.charCodeAt(i) > 0x7F) {\r\n                throw new errors.ASN1CharactersError("GeneralString can only contain ASCII characters.");\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    set universalString(value) {\r\n        const buf = new Uint8Array(value.length << 2);\r\n        for (let i = 0; i < value.length; i++) {\r\n            buf[(i << 2)] = value.charCodeAt(i) >>> 24;\r\n            buf[(i << 2) + 1] = value.charCodeAt(i) >>> 16;\r\n            buf[(i << 2) + 2] = value.charCodeAt(i) >>> 8;\r\n            buf[(i << 2) + 3] = value.charCodeAt(i);\r\n        }\r\n        this.value = buf;\r\n    }\r\n    get universalString() {\r\n        const valueBytes = this.deconstruct("UniversalString");\r\n        if (valueBytes.length % 4) {\r\n            throw new errors.ASN1Error("UniversalString encoded on non-mulitple of four bytes.");\r\n        }\r\n        let ret = "";\r\n        for (let i = 0; i < valueBytes.length; i += 4) {\r\n            ret += String.fromCharCode((valueBytes[i + 0] << 24)\r\n                + (valueBytes[i + 1] << 16)\r\n                + (valueBytes[i + 2] << 8)\r\n                + (valueBytes[i + 3] << 0));\r\n        }\r\n        return ret;\r\n    }\r\n    set bmpString(value) {\r\n        const buf = new Uint8Array(value.length << 1);\r\n        for (let i = 0, strLen = value.length; i < strLen; i++) {\r\n            buf[(i << 1)] = value.charCodeAt(i) >>> 8;\r\n            buf[(i << 1) + 1] = value.charCodeAt(i);\r\n        }\r\n        this.value = buf;\r\n    }\r\n    get bmpString() {\r\n        const valueBytes = this.deconstruct("BMPString");\r\n        if (valueBytes.length % 2)\r\n            throw new errors.ASN1Error("BMPString encoded on non-mulitple of two bytes.");\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-16be")).decode(valueBytes.buffer);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            const swappedEndianness = new Uint8Array(valueBytes.length);\r\n            for (let i = 0; i < valueBytes.length; i += 2) {\r\n                swappedEndianness[i] = valueBytes[i + 1];\r\n                swappedEndianness[i + 1] = valueBytes[i];\r\n            }\r\n            ret = (Buffer.from(swappedEndianness)).toString("utf-16le");\r\n        }\r\n        return ret;\r\n    }\r\n    fromBytes(bytes) {\r\n        if (bytes.length < 2) {\r\n            throw new errors.ASN1TruncationError("Tried to decode a BER element that is less than two bytes.");\r\n        }\r\n        if ((this.recursionCount + 1) > BERElement.nestingRecursionLimit)\r\n            throw new errors.ASN1RecursionError();\r\n        let cursor = 0;\r\n        switch (bytes[cursor] & 0b11000000) {\r\n            case (0b00000000):\r\n                this.tagClass = values_1.ASN1TagClass.universal;\r\n                break;\r\n            case (0b01000000):\r\n                this.tagClass = values_1.ASN1TagClass.application;\r\n                break;\r\n            case (0b10000000):\r\n                this.tagClass = values_1.ASN1TagClass.context;\r\n                break;\r\n            case (0b11000000):\r\n                this.tagClass = values_1.ASN1TagClass.private;\r\n                break;\r\n            default: this.tagClass = values_1.ASN1TagClass.universal;\r\n        }\r\n        this.construction = ((bytes[cursor] & 0b00100000)\r\n            ? values_1.ASN1Construction.constructed : values_1.ASN1Construction.primitive);\r\n        this.tagNumber = (bytes[cursor] & 0b00011111);\r\n        cursor++;\r\n        if (this.tagNumber >= 31) {\r\n            if (bytes[cursor] === 0b10000000) {\r\n                throw new errors.ASN1PaddingError("Leading padding byte on long tag number encoding.");\r\n            }\r\n            this.tagNumber = 0;\r\n            const limit = (((bytes.length - 1) >= 4) ? 4 : (bytes.length - 1));\r\n            while (cursor < limit) {\r\n                if (!(bytes[cursor++] & 0b10000000))\r\n                    break;\r\n            }\r\n            if (bytes[cursor - 1] & 0b10000000) {\r\n                if (limit === (bytes.length - 1)) {\r\n                    throw new errors.ASN1TruncationError("ASN.1 tag number appears to have been truncated.");\r\n                }\r\n                else {\r\n                    throw new errors.ASN1OverflowError("ASN.1 tag number too large.");\r\n                }\r\n            }\r\n            for (let i = 1; i < cursor; i++) {\r\n                this.tagNumber <<= 7;\r\n                this.tagNumber |= (bytes[i] & 0x7F);\r\n            }\r\n            if (this.tagNumber <= 31) {\r\n                throw new errors.ASN1Error("ASN.1 tag number could have been encoded in short form.");\r\n            }\r\n        }\r\n        if ((bytes[cursor] & 0b10000000) === 0b10000000) {\r\n            const numberOfLengthOctets = (bytes[cursor] & 0x7F);\r\n            if (numberOfLengthOctets) {\r\n                if (numberOfLengthOctets === 0b01111111) {\r\n                    throw new errors.ASN1UndefinedError("Length byte with undefined meaning encountered.");\r\n                }\r\n                if (numberOfLengthOctets > 4) {\r\n                    throw new errors.ASN1OverflowError("Element length too long to decode to an integer.");\r\n                }\r\n                if (cursor + numberOfLengthOctets >= bytes.length) {\r\n                    throw new errors.ASN1TruncationError("Element length bytes appear to have been truncated.");\r\n                }\r\n                cursor++;\r\n                const lengthNumberOctets = new Uint8Array(4);\r\n                for (let i = numberOfLengthOctets; i > 0; i--) {\r\n                    lengthNumberOctets[(4 - i)] = bytes[(cursor + numberOfLengthOctets - i)];\r\n                }\r\n                let length = 0;\r\n                lengthNumberOctets.forEach((octet) => {\r\n                    length <<= 8;\r\n                    length += octet;\r\n                });\r\n                if ((cursor + length) < cursor) {\r\n                    throw new errors.ASN1OverflowError("ASN.1 element too large.");\r\n                }\r\n                cursor += (numberOfLengthOctets);\r\n                if ((cursor + length) > bytes.length)\r\n                    throw new errors.ASN1TruncationError("ASN.1 element truncated.");\r\n                this.value = bytes.slice(cursor, (cursor + length));\r\n                return (cursor + length);\r\n            }\r\n            else {\r\n                if (this.construction !== values_1.ASN1Construction.constructed) {\r\n                    throw new errors.ASN1ConstructionError("Indefinite length ASN.1 element was not of constructed construction.");\r\n                }\r\n                const startOfValue = ++cursor;\r\n                let sentinel = cursor;\r\n                while (sentinel < bytes.length) {\r\n                    const child = new BERElement();\r\n                    child.recursionCount = (this.recursionCount + 1);\r\n                    sentinel += child.fromBytes(bytes.slice(sentinel));\r\n                    if (child.tagClass === values_1.ASN1TagClass.universal\r\n                        && child.construction === values_1.ASN1Construction.primitive\r\n                        && child.tagNumber === values_1.ASN1UniversalType.endOfContent\r\n                        && child.value.length === 0)\r\n                        break;\r\n                }\r\n                if (sentinel === bytes.length && (bytes[sentinel - 1] !== 0x00 || bytes[sentinel - 2] !== 0x00)) {\r\n                    throw new errors.ASN1TruncationError("No END OF CONTENT element found at the end of indefinite length ASN.1 element.");\r\n                }\r\n                this.value = bytes.slice(startOfValue, (sentinel - 2));\r\n                return sentinel;\r\n            }\r\n        }\r\n        else {\r\n            const length = (bytes[cursor++] & 0x7F);\r\n            if ((cursor + length) > bytes.length)\r\n                throw new errors.ASN1TruncationError("ASN.1 element was truncated.");\r\n            this.value = bytes.slice(cursor, (cursor + length));\r\n            return (cursor + length);\r\n        }\r\n    }\r\n    toBytes() {\r\n        let tagBytes = [0x00];\r\n        tagBytes[0] |= (this.tagClass << 6);\r\n        tagBytes[0] |= (this.construction << 5);\r\n        if (this.tagNumber < 31) {\r\n            tagBytes[0] |= this.tagNumber;\r\n        }\r\n        else {\r\n            tagBytes[0] |= 0b00011111;\r\n            let number = this.tagNumber;\r\n            const encodedNumber = [];\r\n            while (number !== 0) {\r\n                encodedNumber.unshift(number & 0x7F);\r\n                number >>>= 7;\r\n                encodedNumber[0] |= 0b10000000;\r\n            }\r\n            encodedNumber[encodedNumber.length - 1] &= 0b01111111;\r\n            tagBytes = tagBytes.concat(encodedNumber);\r\n        }\r\n        let lengthOctets = [0x00];\r\n        switch (BERElement.lengthEncodingPreference) {\r\n            case (values_1.LengthEncodingPreference.definite): {\r\n                if (this.value.length < 127) {\r\n                    lengthOctets = [this.value.length];\r\n                }\r\n                else {\r\n                    const length = this.value.length;\r\n                    lengthOctets = [0, 0, 0, 0];\r\n                    for (let i = 0; i < 4; i++) {\r\n                        lengthOctets[i] = ((length >>> ((3 - i) << 3)) & 0xFF);\r\n                    }\r\n                    let startOfNonPadding = 0;\r\n                    for (let i = 0; i < (lengthOctets.length - 1); i++) {\r\n                        if (lengthOctets[i] === 0x00)\r\n                            startOfNonPadding++;\r\n                    }\r\n                    lengthOctets = lengthOctets.slice(startOfNonPadding);\r\n                    lengthOctets.unshift(0b10000000 | lengthOctets.length);\r\n                }\r\n                break;\r\n            }\r\n            case (values_1.LengthEncodingPreference.indefinite): {\r\n                lengthOctets = [0b10000000];\r\n                break;\r\n            }\r\n            default:\r\n                throw new errors.ASN1UndefinedError("Invalid LengthEncodingPreference encountered!");\r\n        }\r\n        const ret = new Uint8Array(tagBytes.length\r\n            + lengthOctets.length\r\n            + this.value.length\r\n            + (BERElement.lengthEncodingPreference === values_1.LengthEncodingPreference.indefinite ? 2 : 0));\r\n        ret.set(tagBytes, 0);\r\n        ret.set(lengthOctets, tagBytes.length);\r\n        ret.set(this.value, (tagBytes.length + lengthOctets.length));\r\n        return ret;\r\n    }\r\n    deconstruct(dataType) {\r\n        if (this.construction === values_1.ASN1Construction.primitive) {\r\n            return new Uint8Array(this.value);\r\n        }\r\n        else {\r\n            if ((this.recursionCount + 1) > BERElement.nestingRecursionLimit)\r\n                throw new errors.ASN1RecursionError();\r\n            let appendy = [];\r\n            const substrings = this.sequence;\r\n            substrings.forEach((substring) => {\r\n                if (substring.tagClass !== this.tagClass) {\r\n                    throw new errors.ASN1ConstructionError(`Invalid tag class in recursively-encoded ${dataType}.`);\r\n                }\r\n                if (substring.tagNumber !== this.tagNumber) {\r\n                    throw new errors.ASN1ConstructionError(`Invalid tag class in recursively-encoded ${dataType}.`);\r\n                }\r\n                substring.recursionCount = (this.recursionCount + 1);\r\n                appendy = appendy.concat(substring.deconstruct(dataType));\r\n            });\r\n            let totalLength = 0;\r\n            appendy.forEach((substring) => {\r\n                totalLength += substring.length;\r\n            });\r\n            const whole = new Uint8Array(totalLength);\r\n            let currentIndex = 0;\r\n            appendy.forEach((substring) => {\r\n                whole.set(substring, currentIndex);\r\n                currentIndex += substring.length;\r\n            });\r\n            return whole;\r\n        }\r\n    }\r\n}\r\nexports.BERElement = BERElement;\r\nBERElement.lengthEncodingPreference = values_1.LengthEncodingPreference.definite;\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))\n\n//# sourceURL=webpack://asn1/./source/codecs/ber.ts?')},"./source/codecs/der.ts":
/*!******************************!*\
  !*** ./source/codecs/der.ts ***!
  \******************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('/* WEBPACK VAR INJECTION */(function(Buffer) {\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result["default"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nconst asn1_1 = __webpack_require__(/*! ../asn1 */ "./source/asn1.ts");\r\nconst errors = __importStar(__webpack_require__(/*! ../errors */ "./source/errors.ts"));\r\nconst values_1 = __webpack_require__(/*! ../values */ "./source/values.ts");\r\nconst x690_1 = __webpack_require__(/*! ../x690 */ "./source/x690.ts");\r\nclass DERElement extends x690_1.X690Element {\r\n    set boolean(value) {\r\n        this.value = new Uint8Array(1);\r\n        this.value[0] = (value ? 0xFF : 0x00);\r\n    }\r\n    get boolean() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("BOOLEAN cannot be constructed.");\r\n        }\r\n        if (this.value.length !== 1)\r\n            throw new errors.ASN1SizeError("BOOLEAN not one byte");\r\n        if ((this.value[0] !== 0x00) && (this.value[0] !== 0xFF)) {\r\n            throw new errors.ASN1Error("BOOLEAN must be encoded as 0xFF or 0x00.");\r\n        }\r\n        return (this.value[0] !== 0);\r\n    }\r\n    set bitString(value) {\r\n        if (value.length === 0)\r\n            this.value = new Uint8Array(0);\r\n        const pre = [];\r\n        pre.length = ((value.length >>> 3) + ((value.length % 8) ? 1 : 0)) + 1;\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (value[i] === false)\r\n                continue;\r\n            pre[((i >>> 3) + 1)] |= (0b10000000 >>> (i % 8));\r\n        }\r\n        pre[0] = (8 - (value.length % 8));\r\n        if (pre[0] === 8)\r\n            pre[0] = 0;\r\n        this.value = new Uint8Array(pre);\r\n    }\r\n    get bitString() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("BIT STRING cannot be constructed.");\r\n        }\r\n        if (this.value.length === 0) {\r\n            throw new errors.ASN1Error("ASN.1 BIT STRING cannot be encoded on zero bytes!");\r\n        }\r\n        if (this.value.length === 1 && this.value[0] !== 0) {\r\n            throw new errors.ASN1Error("ASN.1 BIT STRING encoded with deceptive first byte!");\r\n        }\r\n        if (this.value[0] > 7) {\r\n            throw new errors.ASN1Error("First byte of an ASN.1 BIT STRING must be <= 7!");\r\n        }\r\n        let ret = [];\r\n        for (let i = 1; i < this.value.length; i++) {\r\n            ret = ret.concat([\r\n                (Boolean(this.value[i] & 0b10000000)),\r\n                (Boolean(this.value[i] & 0b01000000)),\r\n                (Boolean(this.value[i] & 0b00100000)),\r\n                (Boolean(this.value[i] & 0b00010000)),\r\n                (Boolean(this.value[i] & 0b00001000)),\r\n                (Boolean(this.value[i] & 0b00000100)),\r\n                (Boolean(this.value[i] & 0b00000010)),\r\n                (Boolean(this.value[i] & 0b00000001)),\r\n            ]);\r\n        }\r\n        ret.slice((ret.length - this.value[0])).forEach((bit) => {\r\n            if (bit)\r\n                throw new errors.ASN1Error("BIT STRING had a trailing set bit.");\r\n        });\r\n        ret.length -= this.value[0];\r\n        return ret;\r\n    }\r\n    set octetString(value) {\r\n        this.value = new Uint8Array(value);\r\n    }\r\n    get octetString() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("OCTET STRING cannot be constructed.");\r\n        }\r\n        return new Uint8Array(this.value);\r\n    }\r\n    set objectDescriptor(value) {\r\n        this.graphicString = value;\r\n    }\r\n    get objectDescriptor() {\r\n        return this.graphicString;\r\n    }\r\n    set real(value) {\r\n        if (value === 0.0) {\r\n            this.value = new Uint8Array(0);\r\n            return;\r\n        }\r\n        else if (Number.isNaN(value)) {\r\n            this.value = new Uint8Array([values_1.ASN1SpecialRealValue.notANumber]);\r\n            return;\r\n        }\r\n        else if (value === -0.0) {\r\n            this.value = new Uint8Array([values_1.ASN1SpecialRealValue.minusZero]);\r\n            return;\r\n        }\r\n        else if (value === Infinity) {\r\n            this.value = new Uint8Array([values_1.ASN1SpecialRealValue.plusInfinity]);\r\n            return;\r\n        }\r\n        else if (value === -Infinity) {\r\n            this.value = new Uint8Array([values_1.ASN1SpecialRealValue.minusInfinity]);\r\n            return;\r\n        }\r\n        const valueString = (String.fromCharCode(0b00000011) + value.toFixed(7));\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(valueString);\r\n        }\r\n        else {\r\n            this.value = Buffer.from(valueString, "utf-8");\r\n        }\r\n    }\r\n    get real() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("REAL cannot be constructed.");\r\n        }\r\n        if (this.value.length === 0)\r\n            return 0.0;\r\n        switch (this.value[0] & 0b11000000) {\r\n            case (0b01000000): {\r\n                if (this.value[0] === values_1.ASN1SpecialRealValue.notANumber)\r\n                    return NaN;\r\n                if (this.value[0] === values_1.ASN1SpecialRealValue.minusZero)\r\n                    return -0.0;\r\n                if (this.value[0] === values_1.ASN1SpecialRealValue.plusInfinity)\r\n                    return Infinity;\r\n                if (this.value[0] === values_1.ASN1SpecialRealValue.minusInfinity)\r\n                    return -Infinity;\r\n                throw new errors.ASN1UndefinedError("Unrecognized special REAL value!");\r\n            }\r\n            case (0b00000000): {\r\n                let realString;\r\n                if (typeof TextEncoder !== "undefined") {\r\n                    realString = (new TextDecoder("utf-8")).decode(this.value.slice(1));\r\n                }\r\n                else if (typeof Buffer !== "undefined") {\r\n                    realString = (Buffer.from(this.value.slice(1))).toString("utf-8");\r\n                }\r\n                else {\r\n                    throw new errors.ASN1Error("No ability to decode bytes to string!");\r\n                }\r\n                switch (this.value[0] & 0b00111111) {\r\n                    case 1:\r\n                    case 2:\r\n                        throw new errors.ASN1Error("DER prohibits NR1 and NR2 Base-10 REAL");\r\n                    case 3: {\r\n                        if (!values_1.nr3Regex.test(realString))\r\n                            throw new errors.ASN1Error("Malformed NR3 Base-10 REAL");\r\n                        return parseFloat(realString.replace(",", "."));\r\n                    }\r\n                    default:\r\n                        throw new errors.ASN1UndefinedError("Undefined Base-10 REAL encoding.");\r\n                }\r\n            }\r\n            case (0b10000000):\r\n            case (0b11000000): {\r\n                const sign = ((this.value[0] & 0b01000000) ? -1 : 1);\r\n                const base = ((flag) => {\r\n                    switch (flag) {\r\n                        case (values_1.ASN1RealEncodingBase.base2): return 2;\r\n                        case (values_1.ASN1RealEncodingBase.base8): return 8;\r\n                        case (values_1.ASN1RealEncodingBase.base16): return 16;\r\n                        default:\r\n                            throw new errors.ASN1Error("Impossible REAL encoding base encountered.");\r\n                    }\r\n                })(this.value[0] & 0b00110000);\r\n                const scale = ((flag) => {\r\n                    switch (flag) {\r\n                        case (values_1.ASN1RealEncodingScale.scale0): return 0;\r\n                        case (values_1.ASN1RealEncodingScale.scale1): return 1;\r\n                        case (values_1.ASN1RealEncodingScale.scale2): return 2;\r\n                        case (values_1.ASN1RealEncodingScale.scale3): return 3;\r\n                        default:\r\n                            throw new errors.ASN1Error("Impossible REAL encoding scale encountered.");\r\n                    }\r\n                })(this.value[0] & 0b00001100);\r\n                let exponent;\r\n                let mantissa;\r\n                switch (this.value[0] & 0b00000011) {\r\n                    case (0b00000000): {\r\n                        if (this.value.length < 3)\r\n                            throw new errors.ASN1TruncationError("Binary-encoded REAL truncated.");\r\n                        exponent = asn1_1.ASN1Element.decodeSignedBigEndianInteger(this.value.subarray(1, 2));\r\n                        mantissa = asn1_1.ASN1Element.decodeUnsignedBigEndianInteger(this.value.subarray(2));\r\n                        break;\r\n                    }\r\n                    case (0b00000001): {\r\n                        if (this.value.length < 4)\r\n                            throw new errors.ASN1TruncationError("Binary-encoded REAL truncated.");\r\n                        exponent = asn1_1.ASN1Element.decodeSignedBigEndianInteger(this.value.subarray(1, 3));\r\n                        mantissa = asn1_1.ASN1Element.decodeUnsignedBigEndianInteger(this.value.subarray(3));\r\n                        if (exponent <= 127 && exponent >= -128) {\r\n                            throw new errors.ASN1Error("DER-encoded binary-encoded REAL could have encoded exponent on fewer octets.");\r\n                        }\r\n                        break;\r\n                    }\r\n                    case (0b00000010):\r\n                    case (0b00000011): {\r\n                        throw new errors.ASN1Error("DER-encoded binary REAL encoded in a way that would "\r\n                            + "either overflow or encode on too many octets.");\r\n                    }\r\n                    default:\r\n                        throw new errors.ASN1Error("Impossible binary REAL exponent encoding encountered.");\r\n                }\r\n                if (mantissa !== 0 && !(mantissa % 2)) {\r\n                    throw new errors.ASN1Error("DER-encoded REAL may not have an even non-zero mantissa.");\r\n                }\r\n                return (sign * mantissa * Math.pow(2, scale) * Math.pow(base, exponent));\r\n            }\r\n            default: {\r\n                throw new errors.ASN1Error("Impossible REAL format encountered.");\r\n            }\r\n        }\r\n    }\r\n    set utf8String(value) {\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get utf8String() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("UTF8String cannot be constructed.");\r\n        }\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        return ret;\r\n    }\r\n    set sequence(value) {\r\n        const encodedElements = [];\r\n        value.forEach((element) => {\r\n            encodedElements.push(element.toBytes());\r\n        });\r\n        let totalLength = 0;\r\n        encodedElements.forEach((element) => {\r\n            totalLength += element.length;\r\n        });\r\n        const newValue = new Uint8Array(totalLength);\r\n        let currentIndex = 0;\r\n        encodedElements.forEach((element) => {\r\n            newValue.set(element, currentIndex);\r\n            currentIndex += element.length;\r\n        });\r\n        this.value = newValue;\r\n        this.construction = values_1.ASN1Construction.constructed;\r\n    }\r\n    get sequence() {\r\n        if (this.construction !== values_1.ASN1Construction.constructed) {\r\n            throw new errors.ASN1ConstructionError("SET or SEQUENCE cannot be primitively constructed.");\r\n        }\r\n        const encodedElements = [];\r\n        if (this.value.length === 0)\r\n            return [];\r\n        let i = 0;\r\n        while (i < this.value.length) {\r\n            const next = new DERElement();\r\n            i += next.fromBytes(this.value.slice(i));\r\n            encodedElements.push(next);\r\n        }\r\n        return encodedElements;\r\n    }\r\n    set set(value) {\r\n        this.sequence = value;\r\n    }\r\n    get set() {\r\n        return this.sequence;\r\n    }\r\n    set numericString(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const characterCode = value.charCodeAt(i);\r\n            if (!((characterCode >= 0x30 && characterCode <= 0x39) || characterCode === 0x20)) {\r\n                throw new errors.ASN1CharactersError("NumericString can only contain characters 0 - 9 and space.");\r\n            }\r\n        }\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get numericString() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("NumericString cannot be constructed.");\r\n        }\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        for (let i = 0; i < ret.length; i++) {\r\n            const characterCode = ret.charCodeAt(i);\r\n            if (!((characterCode >= 0x30 && characterCode <= 0x39) || characterCode === 0x20)) {\r\n                throw new errors.ASN1CharactersError("NumericString can only contain characters 0 - 9 and space.");\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    set printableString(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (values_1.printableStringCharacters.indexOf(value.charAt(i)) === -1) {\r\n                throw new errors.ASN1CharactersError(`PrintableString can only contain these characters: ${values_1.printableStringCharacters}`);\r\n            }\r\n        }\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get printableString() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("PrintableString cannot be constructed.");\r\n        }\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        for (let i = 0; i < ret.length; i++) {\r\n            if (values_1.printableStringCharacters.indexOf(ret.charAt(i)) === -1) {\r\n                throw new errors.ASN1CharactersError(`PrintableString can only contain these characters: ${values_1.printableStringCharacters}`);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    set teletexString(value) {\r\n        this.value = new Uint8Array(value);\r\n    }\r\n    get teletexString() {\r\n        return this.octetString;\r\n    }\r\n    set videotexString(value) {\r\n        this.value = new Uint8Array(value);\r\n    }\r\n    get videotexString() {\r\n        return this.octetString;\r\n    }\r\n    set ia5String(value) {\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get ia5String() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("IA5String cannot be constructed.");\r\n        }\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        return ret;\r\n    }\r\n    set utcTime(value) {\r\n        let year = value.getUTCFullYear().toString();\r\n        year = (year.substring(year.length - 2, year.length));\r\n        const month = (value.getUTCMonth() < 9 ? `0${value.getUTCMonth() + 1}` : `${value.getUTCMonth() + 1}`);\r\n        const day = (value.getUTCDate() < 10 ? `0${value.getUTCDate()}` : `${value.getUTCDate()}`);\r\n        const hour = (value.getUTCHours() < 10 ? `0${value.getUTCHours()}` : `${value.getUTCHours()}`);\r\n        const minute = (value.getUTCMinutes() < 10 ? `0${value.getUTCMinutes()}` : `${value.getUTCMinutes()}`);\r\n        const second = (value.getUTCSeconds() < 10 ? `0${value.getUTCSeconds()}` : `${value.getUTCSeconds()}`);\r\n        const utcString = `${year}${month}${day}${hour}${minute}${second}Z`;\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(utcString);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(utcString, "utf-8");\r\n        }\r\n    }\r\n    get utcTime() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("UTCTime cannot be constructed.");\r\n        }\r\n        let dateString = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            dateString = (new TextDecoder("utf-8")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            dateString = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        const match = values_1.utcTimeRegex.exec(dateString);\r\n        if (match === null)\r\n            throw new errors.ASN1Error("Malformed UTCTime string.");\r\n        const ret = new Date();\r\n        let year = Number(match[1]);\r\n        year = (year < 70 ? (2000 + year) : (1900 + year));\r\n        const month = (Number(match[2]) - 1);\r\n        const date = Number(match[3]);\r\n        const hours = Number(match[4]);\r\n        const minutes = Number(match[5]);\r\n        const seconds = Number(match[6]);\r\n        DERElement.validateDateTime("UTCTime", year, month, date, hours, minutes, seconds);\r\n        ret.setUTCFullYear(year);\r\n        ret.setUTCMonth(month);\r\n        ret.setUTCDate(date);\r\n        ret.setUTCHours(hours);\r\n        ret.setUTCMinutes(minutes);\r\n        ret.setUTCSeconds(seconds);\r\n        return ret;\r\n    }\r\n    set generalizedTime(value) {\r\n        const year = value.getUTCFullYear().toString();\r\n        const month = (value.getUTCMonth() < 9 ? `0${value.getUTCMonth() + 1}` : `${value.getUTCMonth() + 1}`);\r\n        const day = (value.getUTCDate() < 10 ? `0${value.getUTCDate()}` : `${value.getUTCDate()}`);\r\n        const hour = (value.getUTCHours() < 10 ? `0${value.getUTCHours()}` : `${value.getUTCHours()}`);\r\n        const minute = (value.getUTCMinutes() < 10 ? `0${value.getUTCMinutes()}` : `${value.getUTCMinutes()}`);\r\n        const second = (value.getUTCSeconds() < 10 ? `0${value.getUTCSeconds()}` : `${value.getUTCSeconds()}`);\r\n        const timeString = `${year}${month}${day}${hour}${minute}${second}Z`;\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(timeString);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(timeString, "utf-8");\r\n        }\r\n    }\r\n    get generalizedTime() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("GeneralizedTime cannot be constructed.");\r\n        }\r\n        let dateString = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            dateString = (new TextDecoder("utf-8")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            dateString = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        const match = values_1.generalizedTimeRegex.exec(dateString);\r\n        if (match === null)\r\n            throw new errors.ASN1Error("Malformed GeneralizedTime string.");\r\n        const ret = new Date();\r\n        const year = Number(match[1]);\r\n        const month = (Number(match[2]) - 1);\r\n        const date = Number(match[3]);\r\n        const hours = Number(match[4]);\r\n        const minutes = Number(match[5]);\r\n        const seconds = Number(match[6]);\r\n        DERElement.validateDateTime("GeneralizedTime", year, month, date, hours, minutes, seconds);\r\n        ret.setUTCFullYear(year);\r\n        ret.setUTCMonth(month);\r\n        ret.setUTCDate(date);\r\n        ret.setUTCHours(hours);\r\n        ret.setUTCMinutes(minutes);\r\n        ret.setUTCSeconds(seconds);\r\n        return ret;\r\n    }\r\n    set graphicString(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const characterCode = value.charCodeAt(i);\r\n            if (characterCode < 0x20 || characterCode > 0x7E)\r\n                throw new errors.ASN1CharactersError("GraphicString, VisibleString, or ObjectDescriptor "\r\n                    + "can only contain characters between 0x20 and 0x7E.");\r\n        }\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "utf-8");\r\n        }\r\n    }\r\n    get graphicString() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("GraphicString cannot be constructed.");\r\n        }\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        for (let i = 0; i < ret.length; i++) {\r\n            const characterCode = ret.charCodeAt(i);\r\n            if (characterCode < 0x20 || characterCode > 0x7E) {\r\n                throw new errors.ASN1CharactersError("GraphicString, VisibleString, or ObjectDescriptor "\r\n                    + "can only contain characters between 0x20 and 0x7E."\r\n                    + ` Buffer: ${this.value.join(":")}`);\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    set visibleString(value) {\r\n        this.graphicString = value;\r\n    }\r\n    get visibleString() {\r\n        return this.graphicString;\r\n    }\r\n    set generalString(value) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            if (value.charCodeAt(i) > 0x7F) {\r\n                throw new errors.ASN1CharactersError("GeneralString can only contain ASCII characters.");\r\n            }\r\n        }\r\n        if (typeof TextEncoder !== "undefined") {\r\n            this.value = (new TextEncoder()).encode(value);\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            this.value = Buffer.from(value, "ascii");\r\n        }\r\n    }\r\n    get generalString() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("GeneralString cannot be constructed.");\r\n        }\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-8")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            ret = (Buffer.from(this.value)).toString("utf-8");\r\n        }\r\n        for (let i = 0; i < ret.length; i++) {\r\n            if (ret.charCodeAt(i) > 0x7F) {\r\n                throw new errors.ASN1CharactersError("GeneralString can only contain ASCII characters.");\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    set universalString(value) {\r\n        const buf = new Uint8Array(value.length << 2);\r\n        for (let i = 0; i < value.length; i++) {\r\n            buf[(i << 2)] = value.charCodeAt(i) >>> 24;\r\n            buf[(i << 2) + 1] = value.charCodeAt(i) >>> 16;\r\n            buf[(i << 2) + 2] = value.charCodeAt(i) >>> 8;\r\n            buf[(i << 2) + 3] = value.charCodeAt(i);\r\n        }\r\n        this.value = buf;\r\n    }\r\n    get universalString() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("UniversalString cannot be constructed.");\r\n        }\r\n        if (this.value.length % 4) {\r\n            throw new errors.ASN1Error("UniversalString encoded on non-mulitple of four bytes.");\r\n        }\r\n        let ret = "";\r\n        for (let i = 0; i < this.value.length; i += 4) {\r\n            ret += String.fromCharCode((this.value[i + 0] << 24)\r\n                + (this.value[i + 1] << 16)\r\n                + (this.value[i + 2] << 8)\r\n                + (this.value[i + 3] << 0));\r\n        }\r\n        return ret;\r\n    }\r\n    set bmpString(value) {\r\n        const buf = new Uint8Array(value.length << 1);\r\n        for (let i = 0, strLen = value.length; i < strLen; i++) {\r\n            buf[(i << 1)] = value.charCodeAt(i) >>> 8;\r\n            buf[(i << 1) + 1] = value.charCodeAt(i);\r\n        }\r\n        this.value = buf;\r\n    }\r\n    get bmpString() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("BMPString cannot be constructed.");\r\n        }\r\n        if (this.value.length % 2)\r\n            throw new errors.ASN1Error("BMPString encoded on non-mulitple of two bytes.");\r\n        let ret = "";\r\n        if (typeof TextEncoder !== "undefined") {\r\n            ret = (new TextDecoder("utf-16be")).decode(new Uint8Array(this.value));\r\n        }\r\n        else if (typeof Buffer !== "undefined") {\r\n            const swappedEndianness = new Uint8Array(this.value.length);\r\n            for (let i = 0; i < this.value.length; i += 2) {\r\n                swappedEndianness[i] = this.value[i + 1];\r\n                swappedEndianness[i + 1] = this.value[i];\r\n            }\r\n            ret = (Buffer.from(swappedEndianness)).toString("utf-16le");\r\n        }\r\n        return ret;\r\n    }\r\n    constructor(tagClass = values_1.ASN1TagClass.universal, construction = values_1.ASN1Construction.primitive, tagNumber = 0) {\r\n        super();\r\n        this.tagClass = tagClass;\r\n        this.construction = construction;\r\n        this.tagNumber = tagNumber;\r\n        this.value = new Uint8Array(0);\r\n    }\r\n    fromBytes(bytes) {\r\n        if (bytes.length < 2) {\r\n            throw new errors.ASN1TruncationError("Tried to decode a DER element that is less than two bytes.");\r\n        }\r\n        if ((this.recursionCount + 1) > DERElement.nestingRecursionLimit)\r\n            throw new errors.ASN1RecursionError();\r\n        let cursor = 0;\r\n        switch (bytes[cursor] & 0b11000000) {\r\n            case (0b00000000):\r\n                this.tagClass = values_1.ASN1TagClass.universal;\r\n                break;\r\n            case (0b01000000):\r\n                this.tagClass = values_1.ASN1TagClass.application;\r\n                break;\r\n            case (0b10000000):\r\n                this.tagClass = values_1.ASN1TagClass.context;\r\n                break;\r\n            case (0b11000000):\r\n                this.tagClass = values_1.ASN1TagClass.private;\r\n                break;\r\n            default: this.tagClass = values_1.ASN1TagClass.universal;\r\n        }\r\n        this.construction = ((bytes[cursor] & 0b00100000)\r\n            ? values_1.ASN1Construction.constructed : values_1.ASN1Construction.primitive);\r\n        this.tagNumber = (bytes[cursor] & 0b00011111);\r\n        cursor++;\r\n        if (this.tagNumber >= 31) {\r\n            if (bytes[cursor] === 0b10000000) {\r\n                throw new errors.ASN1PaddingError("Leading padding byte on long tag number encoding.");\r\n            }\r\n            this.tagNumber = 0;\r\n            const limit = (((bytes.length - 1) >= 4) ? 4 : (bytes.length - 1));\r\n            while (cursor < limit) {\r\n                if (!(bytes[cursor++] & 0b10000000))\r\n                    break;\r\n            }\r\n            if (bytes[cursor - 1] & 0b10000000) {\r\n                if (limit === (bytes.length - 1)) {\r\n                    throw new errors.ASN1TruncationError("ASN.1 tag number appears to have been truncated.");\r\n                }\r\n                else {\r\n                    throw new errors.ASN1OverflowError("ASN.1 tag number too large.");\r\n                }\r\n            }\r\n            for (let i = 1; i < cursor; i++) {\r\n                this.tagNumber <<= 7;\r\n                this.tagNumber |= (bytes[i] & 0x7F);\r\n            }\r\n            if (this.tagNumber <= 31) {\r\n                throw new errors.ASN1Error("ASN.1 tag number could have been encoded in short form.");\r\n            }\r\n        }\r\n        if ((bytes[cursor] & 0b10000000) === 0b10000000) {\r\n            const numberOfLengthOctets = (bytes[cursor] & 0x7F);\r\n            if (numberOfLengthOctets === 0b01111111) {\r\n                throw new errors.ASN1UndefinedError("Length byte with undefined meaning encountered.");\r\n            }\r\n            if (numberOfLengthOctets > 4) {\r\n                throw new errors.ASN1OverflowError("Element length too long to decode to an integer.");\r\n            }\r\n            if (cursor + numberOfLengthOctets >= bytes.length) {\r\n                throw new errors.ASN1TruncationError("Element length bytes appear to have been truncated.");\r\n            }\r\n            cursor++;\r\n            const lengthNumberOctets = new Uint8Array(4);\r\n            for (let i = numberOfLengthOctets; i > 0; i--) {\r\n                lengthNumberOctets[(4 - i)] = bytes[(cursor + numberOfLengthOctets - i)];\r\n            }\r\n            let length = 0;\r\n            lengthNumberOctets.forEach((octet) => {\r\n                length <<= 8;\r\n                length += octet;\r\n            });\r\n            if ((cursor + length) < cursor) {\r\n                throw new errors.ASN1OverflowError("ASN.1 element too large.");\r\n            }\r\n            cursor += (numberOfLengthOctets);\r\n            if ((cursor + length) > bytes.length)\r\n                throw new errors.ASN1TruncationError("ASN.1 element truncated.");\r\n            if (((length <= 127 && length >= -128) && numberOfLengthOctets > 1)\r\n                || ((length <= 32767 && length >= -32768) && numberOfLengthOctets > 2)\r\n                || ((length <= 8388607 && length >= -8388608) && numberOfLengthOctets > 3)) {\r\n                throw new errors.ASN1PaddingError("DER-encoded long-form length encoded on more octets than necessary");\r\n            }\r\n            this.value = bytes.slice(cursor, (cursor + length));\r\n            return (cursor + length);\r\n        }\r\n        else {\r\n            const length = (bytes[cursor++] & 0x7F);\r\n            if ((cursor + length) > bytes.length)\r\n                throw new errors.ASN1TruncationError("ASN.1 element was truncated.");\r\n            this.value = bytes.slice(cursor, (cursor + length));\r\n            return (cursor + length);\r\n        }\r\n    }\r\n    toBytes() {\r\n        let tagBytes = [0x00];\r\n        tagBytes[0] |= (this.tagClass << 6);\r\n        tagBytes[0] |= (this.construction << 5);\r\n        if (this.tagNumber < 31) {\r\n            tagBytes[0] |= this.tagNumber;\r\n        }\r\n        else {\r\n            tagBytes[0] |= 0b00011111;\r\n            let number = this.tagNumber;\r\n            const encodedNumber = [];\r\n            while (number !== 0) {\r\n                encodedNumber.unshift(number & 0x7F);\r\n                number >>>= 7;\r\n                encodedNumber[0] |= 0b10000000;\r\n            }\r\n            encodedNumber[encodedNumber.length - 1] &= 0b01111111;\r\n            tagBytes = tagBytes.concat(encodedNumber);\r\n        }\r\n        let lengthOctets = [0x00];\r\n        if (this.value.length < 127) {\r\n            lengthOctets = [this.value.length];\r\n        }\r\n        else {\r\n            const length = this.value.length;\r\n            lengthOctets = [0, 0, 0, 0];\r\n            for (let i = 0; i < 4; i++) {\r\n                lengthOctets[i] = ((length >>> ((3 - i) << 3)) & 0xFF);\r\n            }\r\n            let startOfNonPadding = 0;\r\n            for (let i = 0; i < (lengthOctets.length - 1); i++) {\r\n                if (lengthOctets[i] === 0x00)\r\n                    startOfNonPadding++;\r\n            }\r\n            lengthOctets = lengthOctets.slice(startOfNonPadding);\r\n            lengthOctets.unshift(0b10000000 | lengthOctets.length);\r\n        }\r\n        const ret = new Uint8Array(tagBytes.length\r\n            + lengthOctets.length\r\n            + this.value.length);\r\n        ret.set(tagBytes, 0);\r\n        ret.set(lengthOctets, tagBytes.length);\r\n        ret.set(this.value, (tagBytes.length + lengthOctets.length));\r\n        return ret;\r\n    }\r\n}\r\nexports.DERElement = DERElement;\r\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/node-libs-browser/node_modules/buffer/index.js */ "./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer))\n\n//# sourceURL=webpack://asn1/./source/codecs/der.ts?')},"./source/errors.ts":
/*!**************************!*\
  !*** ./source/errors.ts ***!
  \**************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nclass ASN1Error extends Error {\r\n    constructor(m) {\r\n        super(m);\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1Error = ASN1Error;\r\nclass ASN1NotImplementedError extends ASN1Error {\r\n    constructor() {\r\n        super("Not yet implemented.");\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1NotImplementedError = ASN1NotImplementedError;\r\nclass ASN1RecursionError extends ASN1Error {\r\n    constructor() {\r\n        super("Recursion was too deep.");\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1RecursionError = ASN1RecursionError;\r\nclass ASN1TruncationError extends ASN1Error {\r\n    constructor(m) {\r\n        super(m);\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1TruncationError = ASN1TruncationError;\r\nclass ASN1OverflowError extends ASN1Error {\r\n    constructor(m) {\r\n        super(m);\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1OverflowError = ASN1OverflowError;\r\nclass ASN1SizeError extends ASN1Error {\r\n    constructor(m) {\r\n        super(m);\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1SizeError = ASN1SizeError;\r\nclass ASN1PaddingError extends ASN1Error {\r\n    constructor(m) {\r\n        super(m);\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1PaddingError = ASN1PaddingError;\r\nclass ASN1UndefinedError extends ASN1Error {\r\n    constructor(m) {\r\n        super(m);\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1UndefinedError = ASN1UndefinedError;\r\nclass ASN1CharactersError extends ASN1Error {\r\n    constructor(m) {\r\n        super(m);\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1CharactersError = ASN1CharactersError;\r\nclass ASN1ConstructionError extends ASN1Error {\r\n    constructor(m) {\r\n        super(m);\r\n        Object.setPrototypeOf(this, ASN1Error.prototype);\r\n    }\r\n}\r\nexports.ASN1ConstructionError = ASN1ConstructionError;\r\n\n\n//# sourceURL=webpack://asn1/./source/errors.ts?')},"./source/index.ts":
/*!*************************!*\
  !*** ./source/index.ts ***!
  \*************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\n__export(__webpack_require__(/*! ./asn1 */ "./source/asn1.ts"));\r\n__export(__webpack_require__(/*! ./codecs/ber */ "./source/codecs/ber.ts"));\r\n__export(__webpack_require__(/*! ./codecs/der */ "./source/codecs/der.ts"));\r\n__export(__webpack_require__(/*! ./errors */ "./source/errors.ts"));\r\n__export(__webpack_require__(/*! ./types/objectidentifier */ "./source/types/objectidentifier.ts"));\r\n__export(__webpack_require__(/*! ./types/typeidentifier */ "./source/types/typeidentifier.ts"));\r\n__export(__webpack_require__(/*! ./values */ "./source/values.ts"));\r\n\n\n//# sourceURL=webpack://asn1/./source/index.ts?')},"./source/types/objectidentifier.ts":
/*!******************************************!*\
  !*** ./source/types/objectidentifier.ts ***!
  \******************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nclass ObjectIdentifier {\r\n    constructor(nodes) {\r\n        if (nodes.length < 2)\r\n            throw new Error("Cannot construct an OID with less than two nodes!");\r\n        if (nodes.length >= 1 && !(nodes[0] in [0, 1, 2]))\r\n            throw new Error("OIDs first node must be 0, 1, or 2!");\r\n        if (((nodes[0] < 2) && nodes[1] > 39)\r\n            || (nodes[0] === 2 && nodes[1] > 175)) {\r\n            throw new Error("OID Node #2 cannot exceed 39 if node #1 is 0 or 1, and 175 "\r\n                + `if node #1 is 2. Received these nodes: ${nodes}.`);\r\n        }\r\n        nodes.forEach((node) => {\r\n            if (node < 0)\r\n                throw new Error("OID node numbers cannot be negative!");\r\n            if (node > Number.MAX_SAFE_INTEGER)\r\n                throw new Error("OID number was too big!");\r\n        });\r\n        this._nodes = nodes.slice(0);\r\n    }\r\n    get nodes() {\r\n        return this._nodes.slice(0);\r\n    }\r\n    get dotDelimitedNotation() {\r\n        return this._nodes.join(".");\r\n    }\r\n    toString() {\r\n        return this.dotDelimitedNotation;\r\n    }\r\n}\r\nexports.ObjectIdentifier = ObjectIdentifier;\r\n\n\n//# sourceURL=webpack://asn1/./source/types/objectidentifier.ts?')},"./source/types/typeidentifier.ts":
/*!****************************************!*\
  !*** ./source/types/typeidentifier.ts ***!
  \****************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nclass TypeIdentifier {\r\n    constructor(id, type) {\r\n        this.id = id;\r\n        this.type = type;\r\n    }\r\n}\r\nexports.TypeIdentifier = TypeIdentifier;\r\n\n\n//# sourceURL=webpack://asn1/./source/types/typeidentifier.ts?')},"./source/values.ts":
/*!**************************!*\
  !*** ./source/values.ts ***!
  \**************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nexports.MAX_UINT_32 = 0x00FFFFFFFF;\r\nexports.MIN_UINT_32 = 0x0000000000;\r\nexports.MAX_SINT_32 = 0x7FFFFFFF;\r\nexports.MIN_SINT_32 = -0x80000000;\r\nvar ASN1TagClass;\r\n(function (ASN1TagClass) {\r\n    ASN1TagClass[ASN1TagClass["universal"] = 0] = "universal";\r\n    ASN1TagClass[ASN1TagClass["application"] = 1] = "application";\r\n    ASN1TagClass[ASN1TagClass["context"] = 2] = "context";\r\n    ASN1TagClass[ASN1TagClass["private"] = 3] = "private";\r\n})(ASN1TagClass = exports.ASN1TagClass || (exports.ASN1TagClass = {}));\r\nvar ASN1Construction;\r\n(function (ASN1Construction) {\r\n    ASN1Construction[ASN1Construction["primitive"] = 0] = "primitive";\r\n    ASN1Construction[ASN1Construction["constructed"] = 1] = "constructed";\r\n})(ASN1Construction = exports.ASN1Construction || (exports.ASN1Construction = {}));\r\nvar LengthEncodingPreference;\r\n(function (LengthEncodingPreference) {\r\n    LengthEncodingPreference[LengthEncodingPreference["definite"] = 0] = "definite";\r\n    LengthEncodingPreference[LengthEncodingPreference["indefinite"] = 1] = "indefinite";\r\n})(LengthEncodingPreference = exports.LengthEncodingPreference || (exports.LengthEncodingPreference = {}));\r\nvar ASN1SpecialRealValue;\r\n(function (ASN1SpecialRealValue) {\r\n    ASN1SpecialRealValue[ASN1SpecialRealValue["plusInfinity"] = 64] = "plusInfinity";\r\n    ASN1SpecialRealValue[ASN1SpecialRealValue["minusInfinity"] = 65] = "minusInfinity";\r\n    ASN1SpecialRealValue[ASN1SpecialRealValue["notANumber"] = 66] = "notANumber";\r\n    ASN1SpecialRealValue[ASN1SpecialRealValue["minusZero"] = 67] = "minusZero";\r\n})(ASN1SpecialRealValue = exports.ASN1SpecialRealValue || (exports.ASN1SpecialRealValue = {}));\r\nvar ASN1RealEncodingBase;\r\n(function (ASN1RealEncodingBase) {\r\n    ASN1RealEncodingBase[ASN1RealEncodingBase["base2"] = 0] = "base2";\r\n    ASN1RealEncodingBase[ASN1RealEncodingBase["base8"] = 16] = "base8";\r\n    ASN1RealEncodingBase[ASN1RealEncodingBase["base16"] = 32] = "base16";\r\n})(ASN1RealEncodingBase = exports.ASN1RealEncodingBase || (exports.ASN1RealEncodingBase = {}));\r\nvar ASN1RealEncodingScale;\r\n(function (ASN1RealEncodingScale) {\r\n    ASN1RealEncodingScale[ASN1RealEncodingScale["scale0"] = 0] = "scale0";\r\n    ASN1RealEncodingScale[ASN1RealEncodingScale["scale1"] = 4] = "scale1";\r\n    ASN1RealEncodingScale[ASN1RealEncodingScale["scale2"] = 8] = "scale2";\r\n    ASN1RealEncodingScale[ASN1RealEncodingScale["scale3"] = 12] = "scale3";\r\n})(ASN1RealEncodingScale = exports.ASN1RealEncodingScale || (exports.ASN1RealEncodingScale = {}));\r\nvar ASN1UniversalType;\r\n(function (ASN1UniversalType) {\r\n    ASN1UniversalType[ASN1UniversalType["endOfContent"] = 0] = "endOfContent";\r\n    ASN1UniversalType[ASN1UniversalType["boolean"] = 1] = "boolean";\r\n    ASN1UniversalType[ASN1UniversalType["integer"] = 2] = "integer";\r\n    ASN1UniversalType[ASN1UniversalType["bitString"] = 3] = "bitString";\r\n    ASN1UniversalType[ASN1UniversalType["octetString"] = 4] = "octetString";\r\n    ASN1UniversalType[ASN1UniversalType["nill"] = 5] = "nill";\r\n    ASN1UniversalType[ASN1UniversalType["objectIdentifier"] = 6] = "objectIdentifier";\r\n    ASN1UniversalType[ASN1UniversalType["objectDescriptor"] = 7] = "objectDescriptor";\r\n    ASN1UniversalType[ASN1UniversalType["external"] = 8] = "external";\r\n    ASN1UniversalType[ASN1UniversalType["realNumber"] = 9] = "realNumber";\r\n    ASN1UniversalType[ASN1UniversalType["enumerated"] = 10] = "enumerated";\r\n    ASN1UniversalType[ASN1UniversalType["embeddedPDV"] = 11] = "embeddedPDV";\r\n    ASN1UniversalType[ASN1UniversalType["utf8String"] = 12] = "utf8String";\r\n    ASN1UniversalType[ASN1UniversalType["relativeOID"] = 13] = "relativeOID";\r\n    ASN1UniversalType[ASN1UniversalType["reserved14"] = 14] = "reserved14";\r\n    ASN1UniversalType[ASN1UniversalType["reserved15"] = 15] = "reserved15";\r\n    ASN1UniversalType[ASN1UniversalType["sequence"] = 16] = "sequence";\r\n    ASN1UniversalType[ASN1UniversalType["set"] = 17] = "set";\r\n    ASN1UniversalType[ASN1UniversalType["numericString"] = 18] = "numericString";\r\n    ASN1UniversalType[ASN1UniversalType["printableString"] = 19] = "printableString";\r\n    ASN1UniversalType[ASN1UniversalType["teletexString"] = 20] = "teletexString";\r\n    ASN1UniversalType[ASN1UniversalType["videotexString"] = 21] = "videotexString";\r\n    ASN1UniversalType[ASN1UniversalType["ia5String"] = 22] = "ia5String";\r\n    ASN1UniversalType[ASN1UniversalType["utcTime"] = 23] = "utcTime";\r\n    ASN1UniversalType[ASN1UniversalType["generalizedTime"] = 24] = "generalizedTime";\r\n    ASN1UniversalType[ASN1UniversalType["graphicString"] = 25] = "graphicString";\r\n    ASN1UniversalType[ASN1UniversalType["visibleString"] = 26] = "visibleString";\r\n    ASN1UniversalType[ASN1UniversalType["generalString"] = 27] = "generalString";\r\n    ASN1UniversalType[ASN1UniversalType["universalString"] = 28] = "universalString";\r\n    ASN1UniversalType[ASN1UniversalType["characterString"] = 29] = "characterString";\r\n    ASN1UniversalType[ASN1UniversalType["bmpString"] = 30] = "bmpString";\r\n})(ASN1UniversalType = exports.ASN1UniversalType || (exports.ASN1UniversalType = {}));\r\nexports.printableStringCharacters = "etaoinsrhdlucmfywgpbvkxqjzETAOINSRHDLUCMFYWGPBVKXQJZ0123456789 \'()+,-./:=?";\r\nexports.utcTimeRegex = /^(\\d{2})((?:1[0-2])|(?:0\\d))((?:3[01])|(?:[0-2]\\d))((?:2[0-3])|(?:[01]\\d))([0-5]\\d)([0-5]\\d)?((?:(\\+|-)((?:2[0-3])|(?:[01]\\d))[0-5]\\d)|Z)$/;\r\nexports.generalizedTimeRegex = /^(\\d{4})((?:1[0-2])|(?:0\\d))((?:3[01])|(?:[0-2]\\d))((?:2[0-3])|(?:[01]\\d))([0-5]\\d)?([0-5]\\d)?(?:(?:\\.|,)(\\d+))?((?:(?:\\+|-)((?:2[0-3])|(?:[01]\\d))[0-5]\\d)|Z)?$/;\r\nexports.nr1Regex = /^ *(\\+|-)?\\d+$/u;\r\nexports.nr2Regex = /^ *(\\+|-)?(?:\\d+(\\.|,)\\d*)|(?:\\d*(\\.|,)\\d+)$/u;\r\nexports.nr3Regex = /^ *(\\+|-)?(?:\\d+(\\.|,)\\d*)|(?:\\d*(\\.|,)\\d+)(e|E)(\\+|-)?\\d+$/u;\r\nexports.canonicalNR3Regex = /^ *-?(?:[1-9]\\d*)?[1-9]\\.E(?:\\+0)|(?:-?[1-9]\\d*)$/u;\r\nexports.distinguishedNR3Regex = /^ *-?(?:[1-9]\\d*)?[1-9]\\.E(?:\\+0)|(?:-?[1-9]\\d*)$/u;\r\nexports.CANONICAL_TAG_CLASS_ORDERING = [\r\n    ASN1TagClass.universal,\r\n    ASN1TagClass.application,\r\n    ASN1TagClass.private,\r\n    ASN1TagClass.context,\r\n];\r\n\n\n//# sourceURL=webpack://asn1/./source/values.ts?')},"./source/x690.ts":
/*!************************!*\
  !*** ./source/x690.ts ***!
  \************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result["default"] = mod;\r\n    return result;\r\n};\r\nObject.defineProperty(exports, "__esModule", { value: true });\r\nconst asn1_1 = __webpack_require__(/*! ./asn1 */ "./source/asn1.ts");\r\nconst errors = __importStar(__webpack_require__(/*! ./errors */ "./source/errors.ts"));\r\nconst objectidentifier_1 = __webpack_require__(/*! ./types/objectidentifier */ "./source/types/objectidentifier.ts");\r\nconst values_1 = __webpack_require__(/*! ./values */ "./source/values.ts");\r\nclass X690Element extends asn1_1.ASN1Element {\r\n    validateTag(permittedClasses, permittedConstruction, permittedNumbers) {\r\n        if (!permittedClasses.includes(this.tagClass))\r\n            return -1;\r\n        if (!permittedConstruction.includes(this.construction))\r\n            return -2;\r\n        if (!permittedNumbers.includes(this.tagNumber))\r\n            return -3;\r\n        return 0;\r\n    }\r\n    set integer(value) {\r\n        if (value < values_1.MIN_SINT_32)\r\n            throw new errors.ASN1OverflowError(`Number ${value} too small to be converted.`);\r\n        if (value > values_1.MAX_SINT_32)\r\n            throw new errors.ASN1OverflowError(`Number ${value} too big to be converted.`);\r\n        if (value <= 127 && value >= -128) {\r\n            this.value = new Uint8Array([\r\n                (value & 255),\r\n            ]);\r\n            return;\r\n        }\r\n        else if (value <= 32767 && value >= -32768) {\r\n            this.value = new Uint8Array([\r\n                ((value >> 8) & 255),\r\n                (value & 255),\r\n            ]);\r\n            return;\r\n        }\r\n        else if (value <= 8388607 && value >= -8388608) {\r\n            this.value = new Uint8Array([\r\n                ((value >> 16) & 255),\r\n                ((value >> 8) & 255),\r\n                (value & 255),\r\n            ]);\r\n            return;\r\n        }\r\n        else {\r\n            this.value = new Uint8Array([\r\n                ((value >> 24) & 255),\r\n                ((value >> 16) & 255),\r\n                ((value >> 8) & 255),\r\n                (value & 255),\r\n            ]);\r\n            return;\r\n        }\r\n    }\r\n    get integer() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("INTEGER cannot be constructed.");\r\n        }\r\n        if (this.value.length === 0)\r\n            throw new errors.ASN1SizeError("Number encoded on zero bytes!");\r\n        if (this.value.length > 4)\r\n            throw new errors.ASN1OverflowError("Number too long to decode.");\r\n        if (this.value.length > 2\r\n            && ((this.value[0] === 0xFF && this.value[1] >= 0b10000000)\r\n                || (this.value[0] === 0x00 && this.value[1] < 0b10000000)))\r\n            throw new errors.ASN1PaddingError("Unnecessary padding bytes on INTEGER or ENUMERATED.");\r\n        return asn1_1.ASN1Element.decodeSignedBigEndianInteger(this.value.subarray(0));\r\n    }\r\n    set objectIdentifier(value) {\r\n        const numbers = value.nodes;\r\n        const pre = [((numbers[0] * 40) + numbers[1])];\r\n        const post = X690Element.encodeObjectIdentifierNodes(numbers.slice(2));\r\n        this.value = new Uint8Array(pre.concat(post));\r\n    }\r\n    get objectIdentifier() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("OBJECT IDENTIFIER cannot be constructed.");\r\n        }\r\n        if (this.value.length === 0) {\r\n            throw new errors.ASN1TruncationError("Encoded value was too short to be an OBJECT IDENTIFIER!");\r\n        }\r\n        let numbers = [0, 0];\r\n        if (this.value[0] >= 0x50) {\r\n            numbers[0] = 2;\r\n            numbers[1] = (this.value[0] - 0x50);\r\n        }\r\n        else if (this.value[0] >= 0x28) {\r\n            numbers[0] = 1;\r\n            numbers[1] = (this.value[0] - 0x28);\r\n        }\r\n        else {\r\n            numbers[0] = 0;\r\n            numbers[1] = this.value[0];\r\n        }\r\n        if (this.value.length === 1)\r\n            return new objectidentifier_1.ObjectIdentifier(numbers);\r\n        numbers = numbers.concat(X690Element.decodeObjectIdentifierNodes(this.value.slice(1)));\r\n        return new objectidentifier_1.ObjectIdentifier(numbers);\r\n    }\r\n    set enumerated(value) {\r\n        this.integer = value;\r\n    }\r\n    get enumerated() {\r\n        return this.integer;\r\n    }\r\n    set relativeObjectIdentifier(value) {\r\n        this.value = new Uint8Array(X690Element.encodeObjectIdentifierNodes(value));\r\n    }\r\n    get relativeObjectIdentifier() {\r\n        if (this.construction !== values_1.ASN1Construction.primitive) {\r\n            throw new errors.ASN1ConstructionError("Relative OID cannot be constructed.");\r\n        }\r\n        return X690Element.decodeObjectIdentifierNodes(this.value.slice(0));\r\n    }\r\n    static decodeObjectIdentifierNodes(value) {\r\n        if (value.length === 0)\r\n            return [];\r\n        const numbers = [];\r\n        if (value.length > 0 && (value[(value.length - 1)] & 0b10000000) === 0b10000000) {\r\n            throw new errors.ASN1TruncationError("OID truncated");\r\n        }\r\n        let components = 0;\r\n        value.forEach((b) => {\r\n            if (!(b & 0b10000000))\r\n                components++;\r\n        });\r\n        numbers.length = components;\r\n        let currentNumber = 0;\r\n        let bytesUsedInCurrentNumber = 0;\r\n        value.forEach((b) => {\r\n            if (bytesUsedInCurrentNumber === 0 && b === 0b10000000) {\r\n                throw new errors.ASN1PaddingError("OID had invalid padding byte.");\r\n            }\r\n            if (numbers[currentNumber] > (Number.MAX_SAFE_INTEGER >>> 7)) {\r\n                throw new errors.ASN1OverflowError("OID node too big");\r\n            }\r\n            numbers[currentNumber] <<= 7;\r\n            numbers[currentNumber] |= (b & 0x7F);\r\n            if (!(b & 0b10000000)) {\r\n                currentNumber++;\r\n                bytesUsedInCurrentNumber = 0;\r\n            }\r\n            else {\r\n                bytesUsedInCurrentNumber++;\r\n            }\r\n        });\r\n        return numbers;\r\n    }\r\n    static encodeObjectIdentifierNodes(value) {\r\n        let ret = [];\r\n        for (let i = 0; i < value.length; i++) {\r\n            let number = value[i];\r\n            if (number < 128) {\r\n                ret.push(number);\r\n                continue;\r\n            }\r\n            const encodedOIDNode = [];\r\n            while (number !== 0) {\r\n                const numberBytes = [\r\n                    (number & 255),\r\n                    ((number >>> 8) & 255),\r\n                    ((number >>> 16) & 255),\r\n                    ((number >>> 24) & 255),\r\n                ];\r\n                if ((numberBytes[0] & 0x80) === 0)\r\n                    numberBytes[0] |= 0x80;\r\n                encodedOIDNode.unshift(numberBytes[0]);\r\n                number >>= 7;\r\n            }\r\n            encodedOIDNode[encodedOIDNode.length - 1] &= 0x7F;\r\n            ret = ret.concat(encodedOIDNode);\r\n        }\r\n        return ret;\r\n    }\r\n    static isInCanonicalOrder(elements) {\r\n        let previousTagClass = null;\r\n        let previousTagNumber = null;\r\n        if (!elements.every((element) => {\r\n            if (previousTagClass !== null\r\n                && element.tagClass !== previousTagClass\r\n                && values_1.CANONICAL_TAG_CLASS_ORDERING.indexOf(element.tagClass)\r\n                    <= values_1.CANONICAL_TAG_CLASS_ORDERING.indexOf(previousTagClass))\r\n                return false;\r\n            if (element.tagClass !== previousTagClass)\r\n                previousTagNumber = null;\r\n            if (previousTagNumber !== null && element.tagNumber < previousTagNumber)\r\n                return false;\r\n            previousTagClass = element.tagClass;\r\n            previousTagNumber = element.tagNumber;\r\n            return true;\r\n        }))\r\n            return false;\r\n        return true;\r\n    }\r\n    static isUniquelyTagged(elements) {\r\n        const finds = {};\r\n        for (let i = 0; i < elements.length; i++) {\r\n            const key = `${elements[i].tagClass}.${elements[i].tagNumber}`;\r\n            if (key in finds)\r\n                return false;\r\n            finds[key] = null;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexports.X690Element = X690Element;\r\n\n\n//# sourceURL=webpack://asn1/./source/x690.ts?')},0:
/*!*******************************!*\
  !*** multi ./source/index.ts ***!
  \*******************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__(/*! ./source/index.ts */"./source/index.ts");\n\n\n//# sourceURL=webpack://asn1/multi_./source/index.ts?')}});